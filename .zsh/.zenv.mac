# vim:set filetype=zsh fdm=marker:

echo 'setting up environment variables as MacOSX ... ...'

BREW_PATH=`/usr/local/bin/brew --prefix`
export BREW_PATH

# Go {{{
program_exists () {
    type "$1" &> /dev/null ;
}

if program_exists go; then
    export GOROOT=$BREW_PATH/opt/go/libexec
    export GOPATH=$HOME/.go:$HOME/Dropbox/development/go
fi
# }}}


# to read `brew info rbenv`
# rbenv有無に関わらず環境変数は設定する。$HOME以下にするか迷ったが、info準拠で
export RBENV_ROOT=/usr/local/var/rbenv

# homebrewとcoreutils優先の設定
path=(
    #$RBENV_ROOT/shims(N-/) rbenv init -が通してくれてるっぽい
    $RBENV_ROOT/bin(N-/)
    $HOME/.gem/ruby/2.0.0/bin(N-/)

    #haskell packages
    $HOME/.cabal/bin(N-/)

    # 自分のスクリプトとか、自分でビルドしたやつとか
    $HOME/Dropbox/bin/mac(N-/)
    $HOME/Dropbox/bin(N-/)
    $HOME/bin(N-/)

    # 標準のツールとかもhomebrewで導入したのを優先させる
    $BREW_PATH/bin(N-/)

    $BREW_PATH/opt/ruby/bin(N-/)

    #デフォルトのコマンドをGNUコマンドで
    $(/usr/local/bin/brew --prefix coreutils)/libexec/gnubin(N-/)

    # Goの
    $GOROOT/bin(N-/)
    $HOME/.go/bin(N-/)
    $HOME/Dropbox/development/go/bin(N-/)

    /usr/bin(N-/)
    /bin(N-/)
    #sbin
    /usr/local/sbin(N-/)
    /usr/sbin(N-/)
    /sbin(N-/)
    # MacOS規定のPATHを全てこちらで上書きにする？
    # $PATH
    )
export path

# setting completion's function path<<<
fpath=(
        #自作
        $HOME/.zsh/functions/Completion(N-/)

        #zsh-completions
        /usr/local/share/zsh-completions(N-/)
        /usr/local/share/zsh-completions/src(N-/)

        #homebrew
        /usr/local/share/zsh/functions(N-/)
        )
export fpath


MANPATH="$(/usr/local/bin/brew --prefix coreutils)/libexec/gnuman:$MANPATH"
export MANPATH

if which rbenv > /dev/null; then
    # rbenv initがやっていること #
    # - $RBENV_ROOT/shims以下にPATHを通す
    # - rbenvへの補完関数のロード
    # - rehash
    # - その他
    eval "$(rbenv init -)"
fi
## ruby -vをsedしたりしてバージョンを取得した方がよいのかしらん
#export GEM_HOME=$HOME/.gem/ruby/2.0.0

# }}}
# 自分で作ったlesspipeがあればそっち。なければsource-highlight付属のlesspipeを使う。
if [[ -f $HOME/bin/src-hilite-lesspipe.sh ]]; then
    export LESSOPEN='| $HOME/bin/src-hilite-lesspipe.sh %s'
else
    export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
fi

export ANDROID_SDK_ROOT="/usr/local/opt/android-sdk"

# C/C++ {{{
export CC="clang"
export CXX="clang++"
# Cのリンク時のオプション. -Lはライブラリのパス.
export LDFLAGS="-L/usr/local/opt/sqlite/lib"
# Cのプリプロセッサフラグ.
export CPPFLAGS="-I/usr/local/opt/sqlite/include"

# Python settings for virtualenv {{{
export PIP_REQUIRE_VIRTUALENV=true
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages --python=/usr/local/bin/python'
## virtualenv should use Distribute instead of legacy setuptools
# 今はsetuptoolsの方が新しい？
#export VIRTUALENV_DISTRIBUTE=true
source /usr/local/bin/virtualenvwrapper.sh
#--- pip
# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# }}}

##homebrew
#export HOMEBREW_USE_CLANG =
#export HOMEBREW_USE_GCC =
#export HOMEBREW_USE_LLVM =
##ビルド時のmakeジョブ数
#export HOMEBREW_MAKE_JOBS =
##パッケージインストール時に詳細を表示
#export HOMEBREW_VERBOSE = 1
##ソースのダウンロード時に詳細を表示
#export HOMEBREW_USE_CLANG = 1

echo 'done'

